// On importe les dÃ©corateurs et outils Angular nÃ©cessaires
import { Component, inject, Input } from '@angular/core';
// @Component â†’ pour dÃ©clarer un composant Angular
// inject â†’ pour injecter un service (version moderne Angular 16+)
// @Input â†’ permet de recevoir des donnÃ©es depuis le composant parent (comme PokemonListComponent)Add commentMore actions

import { PokemonService } from '../../../CORE/SERVICES/pokemon.service';
// On importe le service qui permet de faire des appels API vers la PokÃ©API

import { Router } from '@angular/router';

@Component({
  selector: 'app-cards', // Nom de la balise HTML pour ce composant â†’ <app-cards>
  standalone: true, //Rend le composant indÃ©pendant d'un parent
  // Angular 18+ standalone : ici tu pourrais ajouter CommonModule, RouterLink, etc. si nÃ©cessaire
  imports: [],

  templateUrl: './cards.component.html', // Fichier HTML associÃ© Ã  ce composant
  styleUrls: ['./cards.component.css'], // Fichier CSS associÃ© Ã  ce composant
})
export class CardsComponent {
  // ğŸ”½ PropriÃ©tÃ©s @Input â†’ ces donnÃ©es sont envoyÃ©es depuis le composant parentAdd commentMore actions
  @Input() name!: string; // Le nom du PokÃ©mon
  @Input() url!: string; // Son URL vers lâ€™API
  @Input() id!: number;

  private router = inject(Router);

  //Fonction pour extraire l'id de l'url
  getIdFromUrl(url: string): number {
    // On dÃ©coupe l'URL en segments sÃ©parÃ©s par des slashs ("/"), on filtre les chaÃ®nes videsAdd commentMore actions
    // .pop() rÃ©cupÃ¨re le dernier segment, qui correspond Ã  lâ€™ID du PokÃ©mon
    return Number(url.split('/').filter(Boolean).pop());
  }
  // ğŸ”§ MÃ©thode utilitaire pour gÃ©nÃ©rer une URL dâ€™image Ã  partir de lâ€™URL API reÃ§ue
  getImageUrl(url: string): string {
    const id = this.getIdFromUrl(url);
    // On reconstruit lâ€™URL de lâ€™image Ã  partir de lâ€™ID
    return `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/${id}.png`;
  }

  goToDetails(): void {
    this.router.navigate(['/pokemon', this.id]);
  }

  // ğŸ’‰ Injection du service PokÃ©mon (version moderne avec inject() au lieu de constructor)Add commentMore actions
  public pokemonService = inject(PokemonService);

  // ğŸ‘‡ Observable contenant les 50 pokÃ©mons (non utilisÃ© ici â€” peut Ãªtre supprimÃ© si inutile)
  pokemons$ = this.pokemonService.getPokemons();
}
